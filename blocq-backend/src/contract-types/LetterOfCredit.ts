/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
} from 'ethers';
import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
} from './common';

export interface LetterOfCreditInterface extends Interface {
    getFunction(
        nameOrSignature:
            | 'admin'
            | 'amount'
            | 'buyer'
            | 'deadline'
            | 'fund'
            | 'funded'
            | 'refunded'
            | 'registerSeller'
            | 'release'
            | 'released'
            | 'seller'
            | 'triggerRefund'
            | 'usdc',
    ): FunctionFragment;

    getEvent(
        nameOrSignatureOrTopic:
            | 'Funded'
            | 'Refunded'
            | 'Released'
            | 'SellerRegistered',
    ): EventFragment;

    encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
    encodeFunctionData(functionFragment: 'amount', values?: undefined): string;
    encodeFunctionData(functionFragment: 'buyer', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'deadline',
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: 'fund',
        values: [BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: 'funded', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'refunded',
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: 'registerSeller',
        values?: undefined,
    ): string;
    encodeFunctionData(functionFragment: 'release', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'released',
        values?: undefined,
    ): string;
    encodeFunctionData(functionFragment: 'seller', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'triggerRefund',
        values?: undefined,
    ): string;
    encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'amount', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'buyer', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'deadline', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'fund', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'funded', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'refunded', data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: 'registerSeller',
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: 'release', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'released', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'seller', data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: 'triggerRefund',
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
}

export namespace FundedEvent {
    export type InputTuple = [buyer: AddressLike, amount: BigNumberish];
    export type OutputTuple = [buyer: string, amount: bigint];
    export interface OutputObject {
        buyer: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
    export type InputTuple = [amount: BigNumberish, timestamp: BigNumberish];
    export type OutputTuple = [amount: bigint, timestamp: bigint];
    export interface OutputObject {
        amount: bigint;
        timestamp: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
    export type InputTuple = [
        by: AddressLike,
        to: AddressLike,
        amount: BigNumberish,
    ];
    export type OutputTuple = [by: string, to: string, amount: bigint];
    export interface OutputObject {
        by: string;
        to: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellerRegisteredEvent {
    export type InputTuple = [seller: AddressLike];
    export type OutputTuple = [seller: string];
    export interface OutputObject {
        seller: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export interface LetterOfCredit extends BaseContract {
    connect(runner?: ContractRunner | null): LetterOfCredit;
    waitForDeployment(): Promise<this>;

    interface: LetterOfCreditInterface;

    queryFilter<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEventLog<TCEvent>>>;

    on<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>,
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>,
    ): Promise<this>;

    once<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>,
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>,
    ): Promise<this>;

    listeners<TCEvent extends TypedContractEvent>(
        event: TCEvent,
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
        event?: TCEvent,
    ): Promise<this>;

    admin: TypedContractMethod<[], [string], 'view'>;

    amount: TypedContractMethod<[], [bigint], 'view'>;

    buyer: TypedContractMethod<[], [string], 'view'>;

    deadline: TypedContractMethod<[], [bigint], 'view'>;

    fund: TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;

    funded: TypedContractMethod<[], [boolean], 'view'>;

    refunded: TypedContractMethod<[], [boolean], 'view'>;

    registerSeller: TypedContractMethod<[], [void], 'nonpayable'>;

    release: TypedContractMethod<[], [void], 'nonpayable'>;

    released: TypedContractMethod<[], [boolean], 'view'>;

    seller: TypedContractMethod<[], [string], 'view'>;

    triggerRefund: TypedContractMethod<[], [void], 'nonpayable'>;

    usdc: TypedContractMethod<[], [string], 'view'>;

    getFunction<T extends ContractMethod = ContractMethod>(
        key: string | FunctionFragment,
    ): T;

    getFunction(
        nameOrSignature: 'admin',
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'amount',
    ): TypedContractMethod<[], [bigint], 'view'>;
    getFunction(
        nameOrSignature: 'buyer',
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'deadline',
    ): TypedContractMethod<[], [bigint], 'view'>;
    getFunction(
        nameOrSignature: 'fund',
    ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'funded',
    ): TypedContractMethod<[], [boolean], 'view'>;
    getFunction(
        nameOrSignature: 'refunded',
    ): TypedContractMethod<[], [boolean], 'view'>;
    getFunction(
        nameOrSignature: 'registerSeller',
    ): TypedContractMethod<[], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'release',
    ): TypedContractMethod<[], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'released',
    ): TypedContractMethod<[], [boolean], 'view'>;
    getFunction(
        nameOrSignature: 'seller',
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'triggerRefund',
    ): TypedContractMethod<[], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'usdc',
    ): TypedContractMethod<[], [string], 'view'>;

    getEvent(
        key: 'Funded',
    ): TypedContractEvent<
        FundedEvent.InputTuple,
        FundedEvent.OutputTuple,
        FundedEvent.OutputObject
    >;
    getEvent(
        key: 'Refunded',
    ): TypedContractEvent<
        RefundedEvent.InputTuple,
        RefundedEvent.OutputTuple,
        RefundedEvent.OutputObject
    >;
    getEvent(
        key: 'Released',
    ): TypedContractEvent<
        ReleasedEvent.InputTuple,
        ReleasedEvent.OutputTuple,
        ReleasedEvent.OutputObject
    >;
    getEvent(
        key: 'SellerRegistered',
    ): TypedContractEvent<
        SellerRegisteredEvent.InputTuple,
        SellerRegisteredEvent.OutputTuple,
        SellerRegisteredEvent.OutputObject
    >;

    filters: {
        'Funded(address,uint256)': TypedContractEvent<
            FundedEvent.InputTuple,
            FundedEvent.OutputTuple,
            FundedEvent.OutputObject
        >;
        Funded: TypedContractEvent<
            FundedEvent.InputTuple,
            FundedEvent.OutputTuple,
            FundedEvent.OutputObject
        >;

        'Refunded(uint256,uint256)': TypedContractEvent<
            RefundedEvent.InputTuple,
            RefundedEvent.OutputTuple,
            RefundedEvent.OutputObject
        >;
        Refunded: TypedContractEvent<
            RefundedEvent.InputTuple,
            RefundedEvent.OutputTuple,
            RefundedEvent.OutputObject
        >;

        'Released(address,address,uint256)': TypedContractEvent<
            ReleasedEvent.InputTuple,
            ReleasedEvent.OutputTuple,
            ReleasedEvent.OutputObject
        >;
        Released: TypedContractEvent<
            ReleasedEvent.InputTuple,
            ReleasedEvent.OutputTuple,
            ReleasedEvent.OutputObject
        >;

        'SellerRegistered(address)': TypedContractEvent<
            SellerRegisteredEvent.InputTuple,
            SellerRegisteredEvent.OutputTuple,
            SellerRegisteredEvent.OutputObject
        >;
        SellerRegistered: TypedContractEvent<
            SellerRegisteredEvent.InputTuple,
            SellerRegisteredEvent.OutputTuple,
            SellerRegisteredEvent.OutputObject
        >;
    };
}
